
type route input(node, node, float).
type route output(node, node, float).

type linear pagerank(node, float).
type linear input-rank(node, node, float).
type linear start(node).
type linear update(node).
type linear new-input-rank(node, node, float).
type linear sum-ranks(node, float).
type linear output-rank(node, node, float).
type linear new-output-rank(node, node, float).

//priority @cluster @static.

const damping = 0.15.
const bound = str2float(@arg1).
const pages = @world.
const start-pagerank = 1.0 / float(pages).

start(A).

start(A) -o { B, W | !input(A, B, W) | input-rank(A, B, start-pagerank)},
            { B, W | !output(A, B, W) | output-rank(A, B, 0.0) },
            pagerank(A, start-pagerank),
            update(A).

new-input-rank(A, B, V),
input-rank(A, B, OldV)
   -o input-rank(A, B, V).

new-output-rank(A, B, V),
output-rank(A, B, OldV)
   -o output-rank(A, B, V).

sum-ranks(A, Acc),
NewRank = damping/float(pages) + (1.0 - damping) * Acc,
pagerank(A, OldRank)
   -o pagerank(A, NewRank),
      {B, W, O, Delta | !output(A, B, W), output-rank(A, B, O), Delta = fabs(O - NewRank) * W |
           output-rank(A, B, O), new-input-rank(B, A, NewRank), (if Delta > bound then update(B) otherwise 1 end)}.

update(A), update(A) -o update(A).

update(A)
   -o [sum => V | B, W, Val | input-rank(A, B, Val), !input(A, B, W), V = Val * W |
            input-rank(A, B, Val), new-output-rank(B, A, Val) | sum-ranks(A, V)].

