node generator.
node consumer.

type generator-id(generator, int).
type consumer-id(consumer, int).
type linear capacity(generator, int Total, int Used).
type linear thread-connected-to(thread, generator, consumer, int).
type linear thread-connected-to-list(thread, generator, list consumer).
type power(consumer, int).
type linear disconnected(consumer).
type linear connected(consumer, generator).
type generators(consumer, list generator).
type linear fails(generator, int).
type linear random-reconnect(generator).

type linear reconnect(consumer).
type linear connect(generator, consumer, int).
type linear disconnect(consumer, generator).
type linear start(generator).

type linear thread-capacity(thread, generator, int, int).
type linear thread-total-capacity(thread, int, int).

index thread-capacity/2.
index thread-connected-to/3.
index thread-connected-to-list/2.
compact generator-id.
compact consumer-id.
compact power.
compact generators.

fun imax(int A, int B) : int = if A > B then A else B end.

thread-total-capacity(T, 0, 0).

fails(G, 0).
disconnected(C).
reconnect(C).
!generators(C, all-generators).
start(G).

start(G), !thread-list(T, L),
!generator-id(G, Id)
   -o set-cpu(G, lnth(L, Id % @cpus)).

just-moved(G),
capacity(G, Total, Used),
thread-total-capacity(T, TotalCapacity, TotalUsed)
   -o set-default-priority(G, 5.0),
      thread-connected-to-list(T, G, []),
      thread-capacity(T, G, Total, Used),
      thread-total-capacity(T, Total + TotalCapacity, Used + TotalUsed).

thread-capacity(T, G, Total, Used),
thread-total-capacity(T, TotalCapacity, TotalUsed),
fails(G, Fails),
random-reconnect(G),
thread-connected-to-list(T, G, L),
L <> [],
C = lnth(L, randint(llength(L))),
thread-connected-to(T, G, C, Power),
NewUsed = Used - Power
   -o fails(G, 0),
      thread-capacity(T, G, Total, NewUsed),
      thread-total-capacity(T, TotalCapacity, TotalUsed - Power),
      thread-connected-to-list(T, G, lremove(L, C)),
      disconnect(C, G).

fails(G, Fails),
random-reconnect(G)
   -o fails(G, 0).

connect(G, C, Power),
thread-total-capacity(T, TotalCapacity, TotalUsed),
thread-capacity(T, G, Total, Used),
fails(G, Fails),
thread-connected-to-list(T, G, L),
NewUsed = Used + Power,
NewUsed <= Total
   -o thread-capacity(T, G, Total, NewUsed),
      thread-total-capacity(T, TotalCapacity, TotalUsed + Power),
      fails(G, imax(Fails - 1, 0)),
      thread-connected-to(T, G, C, Power),
      thread-connected-to-list(T, G, [C | L]).

connect(G, C, Power),
thread-capacity(T, G, Total, Used),
Used + Power > Total,
fails(G, Fails)
   -o thread-capacity(T, G, Total, Used),
      disconnect(C, G),
      fails(G, Fails + 1),
      (if Fails > maxfails then random-reconnect(G) otherwise 1 end).

!power(C, Power),
reconnect(C),
disconnected(C),
thread-total-capacity(T, TotalCapacity, TotalUsed),
TotalNewUsed = TotalUsed + Power,
NewUsed <= TotalCapacity,
thread-capacity(T, G, Total, Used),
thread-connected-to-list(T, G, ConnectList),
NewUsed = Used + Power,
NewUsed <= Total
   -o connected(C, G),
      thread-capacity(T, G, Total, NewUsed),
      thread-connected-to-list(T, G, [C | ConnectList]),
      thread-connected-to(T, G, C, Power),
      thread-total-capacity(T, TotalCapacity, TotalNewUsed).

!generators(C, L),
!power(C, Power),
reconnect(C),
disconnected(C),
G = lnth(L, randint(num-generators))
   -o connected(C, G),
      connect(G, C, Power).

disconnect(C, G),
connected(C, G)
   -o disconnected(C),
      reconnect(C).

