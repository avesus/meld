
type inbound(node, int).
type route edge(node, node, float).
type coord(node, int, int).
type inner(node).
type linear heat(node, float).
type linear neighbor-heat(node, node, float).
type linear new-neighbor-heat(node, node Neighbor, float Value).
type linear initial-neighbor-heat(node, node Neighbor, float Value).
type linear start(node).
type linear wait(node, int).
type linear update(node).
type linear update-neighbors(node, float Diff, float Heat).

compact inner.
compact coord.
compact edge.
compact inbound.
priority @order @desc.
priority @cluster @static.
index neighbor-heat/2.
priority @default 0.0.
priority @no_priority 0.0.

const epsilon = str2float(@arg1).
const delta = str2float(@arg2).

start(A).

start(A), heat(A, H), !inbound(A, T) -o {B, W | !edge(A, B, W) | initial-neighbor-heat(B, A, H)},
                                        wait(A, T),
                                        heat(A, H).

new-neighbor-heat(A, B, Heat),
neighbor-heat(A, B, OldHeat)
   -o neighbor-heat(A, B, Heat).

update-neighbors(A, Diff, New)
   -o {B, W | !edge(A, B, W) | new-neighbor-heat(B, A, New),
                               (if Diff > epsilon then update(B) otherwise 1 end),
                               (if Diff > delta then add-priority(B, Diff) otherwise 1 end)}.

initial-neighbor-heat(A, B, Heat),
wait(A, T), T > 0
   -o wait(A, T - 1),
      neighbor-heat(A, B, Heat).

wait(A, 0) -o update(A).

update(A), update(A) -o update(A).

update(A), !inbound(A, T), heat(A, OldHeat)
   -o [sum => X | B, NewHeat | neighbor-heat(A, B, X) | neighbor-heat(A, B, X) | NewHeat = (X + OldHeat) / float(T + 1), heat(A, NewHeat),
         update-neighbors(A, fabs(NewHeat - OldHeat), NewHeat)].
