
type route edge(node, node).
type linear value(node, int).
type linear search(node, int).
type linear found(node, int).
type linear seen(node, list int).

index search/2.

seen(A, []).

search(A, Val),
seen(A, Seen),
Val in Seen
   -o seen(A, Seen).

search(A, Val),
value(A, Val)
   -o found(A, Val),
      value(A, Val).

value(A, Val1),
search(A, Val2),
seen(A, Seen),
Val1 <> Val2
   -o value(A, Val1),
      seen(A, [Val2 | Seen]),
      {B | !edge(A, B) | search(B, Val2)}.
