
type route edge(node, node).
type linear value(node, int).
type linear search(node, int, list int).
type linear do-search(node, int, list int, list node, list node).
type linear do-search2(node, int, list int, list node, list node).
type linear do-search3(node, int, list int, list node, list node).
type linear found(node, int).
type linear not-found(node, int).

search(A, Id, ToFind)
   -o do-search(A, Id, ToFind, [], []).

do-search(A, Id, ToFind, Visited, Next),
value(A, Val),
Val in ToFind
   -o value(A, Val),
      do-search2(A, Id, lremove(ToFind, Val), Visited, Next).

do-search(A, Id, ToFind, Visited, Next)
   -o do-search2(A, Id, ToFind, Visited, Next).

do-search2(A, Id, [], _, _) -o found(A, Id).
do-search2(A, Id, ToFind, Visited, Next)
   -o [collect => B | !edge(A, B), ~ B in Visited, ~ B in Next | | do-search3(A, Id, ToFind, Visited, B ++ Next)].

do-search3(A, Id, ToFind, Visited, []) -o not-found(A, Id).
do-search3(A, Id, ToFind, Visited, [B | Next])
   -o do-search(B, Id, ToFind, [A | Visited], Next).
