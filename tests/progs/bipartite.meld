
type route edge(node, node).
type linear mark(node, int).
type linear uncolored(node).
type linear colored(node, int).
type linear fail(node).

compact edge.

fun next(int X) : int = if X <> 1 then 1 else 2 end.

!edge(@1, @2).
!edge(@2, @3).
!edge(@3, @2).
!edge(@3, @1).

uncolored(@1). uncolored(@2). uncolored(@3).

mark(@1, 1).

mark(A, P), uncolored(A)
   -o {B | !edge(A, B) | mark(B, next(P))}, colored(A, P).

mark(A, P1), colored(A, P2), P1 <> P2
   -o fail(A).
mark(A, P), colored(A, P) -o colored(A, P).
mark(A, P), fail(A) -o fail(A).
