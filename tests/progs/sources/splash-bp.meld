
type route edge(node, node).
type potential(node, :(float, float, float, float, float)).

type linear belief(node, :(float, float, float, float, float)).
type linear new-neighbor-belief(node, node, :(float, float, float, float, float)). // neighbor sent an update
type linear sent-neighbor-belief(node, node, :(float, float, float, float, float)). // what we sent previously
type linear neighbor-belief(node, node, :(float, float, float, float, float)). // current neighbor belief
type linear neighbor-belief-copy(node, :(float, float, float, float, float)).
type linear neighbor-belief-old(node, node, :(float, float, float, float, float)).

type linear start(node).
type linear update(node).
type linear copy-messages(node).
type linear sum-messages(node, :(float, float, float, float, float)).
type linear update-messages(node, :(float, float, float, float, float)).
type linear check-residual(node, node, float, :(float, float, float, float, float)).

type linear start-tree(thread, list node).
type linear new-tree(thread, list node, list node).
type linear expand-new-tree(thread, list node, list node).
type linear first-phase(thread, list node, list node).
type linear second-phase(thread, list node).

priority @initial 100.
priority @static.
priority @cluster @static.

const global-potential =  :(-0.0, -2.0, -4.0, -6.0, -8.0, -2.0, -0.0, -2.0, -4.0,
                            -6.0, -4.0, -2.0, -0.0, -2.0, -4.0, -6.0, -4.0, -2.0,
                            -0.0, -2.0, -8.0, -6.0, -4.0, -2.0, -0.0).
const initial-message = :(-1.60944, -1.60944, -1.60944, -1.60944, -1.60944).
const initial-belief = :(-1.609438, -1.609438, -1.609438, -1.609438, -1.609438).
const damping = 0.1.
const bound = 0.0001.
//const bound = str2float(@arg2).
const maxnodes = 20.

// setups initial node belief and some other things
start(A) -o belief(A, initial-belief),
            {B | !edge(A, B) | neighbor-belief(A, B, initial-message),
                               sent-neighbor-belief(A, B, initial-message)}.

// start the tree process
start-tree(T, []).

// TREE BUILDING RULES

// this rule is run for the root of the tree
start-tree(T, []),
A = @host,
priority(A) > 0.0
   -o new-tree(T, [A], []).
start-tree(T, [Ignore]),
A = @host,
priority(A) > 0.0,
Ignore <> A
   -o new-tree(T, [A], []).
start-tree(T, [Ignore]),
A = @host,
priority(A) <= 0.0,
Ignore <> A
   -o 1.

// We append into Next all neighbors not yet in the tree
// or not yet schedule to be visited.
new-tree(T, [A | All], Next),
A = @host
   -o [collect => L | !edge(A, L),
         ~ L in All, ~ L in Next,
         priority(L) > 0.0, cpu-id(L) = cpu-id(A) | expand-new-tree(T, [A | All],
               if nodelistlength(All) + 1 = maxnodes then [] else Next ++ L end)].

// after the tree has been expanded,
// we decide to either stop and start the first phase
// or keep expanding.
expand-new-tree(T, [A | All], [])
   -o schedule-next(A), first-phase(T, reverse([A | All]), [A | All]).
expand-new-tree(T, All, [B | Next])
   -o schedule-next(B), new-tree(T, [B | All], Next).

// RULES FOR FIRST PHASE

// when the tree has a single node, we run update immediatelly on the node
first-phase(T, [A], [A]),
A = @host
   -o update(A), start-tree(T, [A]).
// the first phase is done, update A and run the second phase on B.
first-phase(T, [A, B | Next], [A]), A = @host
   -o update(A), schedule-next(B), second-phase(T, [B | Next]).
// if we have nodes to process, we run update and schedule the next node to update on the tree.
first-phase(T, All, [A, B | Next]), A = @host
   -o update(A), schedule-next(B), first-phase(T, All, [B | Next]).

// RULES FOR SECOND PHASE

// in this rule, we are running the second phase on the last node (last node in the tree).
// we add A to the ignore list since we do not want to start the tree here again!
second-phase(T, [A]), A = @host
   -o update(A), start-tree(T, [A]).
// running second phase but not done yet
second-phase(T, [A, B | Next]), A = @host
   -o update(A), schedule-next(B), second-phase(T, [B | Next]).

// NORMAL CODE STARTS HERE

start(A).

// ... adding them up
sum-messages(A, L1), neighbor-belief-copy(A, L2)
   -o sum-messages(A, addfloatstructs(L1, L2)).

// ... no more beliefs to add
sum-messages(A, NewBelief),
Normalized = normalizestruct(NewBelief)
   -o update-messages(A, Normalized), belief(A, Normalized).

// checks residual for setting priorities
check-residual(A, B, Delta, OutMessage),
!edge(A, B),
Delta > bound
   -o set-priority(B, Delta), new-neighbor-belief(B, A, OutMessage).

check-residual(A, B, Delta, OutMessage),
!edge(A, B)
   -o new-neighbor-belief(B, A, OutMessage).

// new neighbor beliefs
neighbor-belief(A, B, Belief),
new-neighbor-belief(A, B, NewBelief)
   -o neighbor-belief(A, B, NewBelief).

// update belief to be sent to one neighbor
update-messages(A, NewBelief),
!edge(A, B),
neighbor-belief-old(A, B, OldIn),
sent-neighbor-belief(A, B, OldOut),
Cavity = normalizestruct(dividestruct(NewBelief, OldIn)),
Convolved = normalizestruct(convolvestruct(global-potential, Cavity)),
OutMessage = dampstruct(Convolved, OldOut, damping)
   -o check-residual(A, B, residualstruct(OutMessage, OldOut), OutMessage),
      update-messages(A, NewBelief),
      sent-neighbor-belief(A, B, OutMessage).

// all beliefs were sent!
update-messages(A, NewBelief) -o 1.

// make a copy of neighbors beliefs in order to add them up
update(A),
!potential(A, Potential),
belief(A, MyBelief)
   -o {B, Belief | neighbor-belief(A, B, Belief) | neighbor-belief-old(A, B, Belief), neighbor-belief-copy(A, Belief), neighbor-belief(A, B, Belief)},
      sum-messages(A, Potential).

